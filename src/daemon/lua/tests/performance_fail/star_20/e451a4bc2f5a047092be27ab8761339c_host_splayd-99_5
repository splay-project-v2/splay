{"me":{"port":18867,"ip":"172.16.0.99"},"network":{"list":"\/home\/splayd\/workspace\/local_splay_cluster\/hosts\/host_splayd-99_5\/jobs\/e451a4bc2f5a047092be27ab8761339c_host_splayd-99_5_list","max_send":134217728,"nb_ports":10,"max_sockets":1024,"local_start_port":18000,"local_end_port":18999,"max_receive":134217728,"ip":"127.0.0.1"},"code":"log=require\"splay.log\"\ndns=require\"splay.async_dns\"\ndns.l_o.level=5\nsocket = require\"socket.core\"\n\nts = require\"splay.topo_socket\" --MUST BE DONE BEFORE SPLAY.BASE\nts.l_o.level=3\ntb = require\"splay.token_bucket\"\ntb.l_o.level = 3\nlocal ts_settings={}\n--modify these settings if you know what you're doing..otherwise, keep defaults\nts_settings.CHOPPING=true \nts_settings.BW_SHARING=\"fair\" --other possible values: 'fair'\nts_settings.MAX_BLOCK_SIZE=8192\nassert(ts.init(ts_settings,job.nodes,job.topology,job.position))\nsocket=ts.wrap(socket)\nst = require\"splay.tree\"\nst.l_o.level =3\nrequire\"splay.base\"\n\n--REQUIRED FOR SPLAYNET: future versions of Splay won't require this code here...--\nnet=require\"splay.net\"\nfunction handle_dcm(msg, ip, port) --the ip and port the data was sent from.\n        --log:print(job.position,\"RECEIVE DCM EVENT:\",msg)\n        local msg_tokens=misc.split(msg, \" \")\n        ts.handle_tree_change_event(msg_tokens)\nend\ndcm_udp_port=job.me.port+1 --by convention, +1 is the udp_port for topology\nu = net.udp_helper(dcm_udp_port, handle_dcm)\nlast_proposed=nil\nlast_ev_broadcasted_idx=0\nfunction dcm()\n\tif ts.last_event_idx>last_ev_broadcasted_idx then\n\t\tfor i=last_ev_broadcasted_idx+1, ts.last_event_idx do\n\t\t  \tlocal e=ts.tree_events[i]\n\t\t  \tif e==nil then break end\n\t\t  \tlast_ev_broadcasted_idx = i\n\t\t  \tfor k,dest in pairs(job.nodes) do --should use UDP multicast,with many nodes this could be slow\n\t\t  \t\tif not  (dest.ip == job.me.ip and dest.port ==job.me.port) then\n\t\t  \t\t        u.s:sendto(e, dest.ip, dest.port+1)\n\t\t  \t\tend\n\t\t  \tend\n\t\tend\n\tend\nend\n--END REQUIRED FOR SPLAYNET --\nrpc = require\"splay.rpc\"\nrpc.server(job.me.port)\nfunction call_me(position)\n\tlog:print(\"I received an RPC from node \"..position)\nend\n-- our main function\nfunction SPLAYschool()\n\tlocal nodes = job.get_live_nodes() --OR the old form: job.nodes\n\tlog:print(\"I'm \"..job.me.ip..\":\"..job.me.port)\n\tlog:print(\"My position in the list is: \"..job.position)\n\tlog:print(\"List type is '\"..job.list_type..\"' with \"..#nodes..\" nodes\")\n\tevents.sleep(30)\n\trpc.call(nodes[math.random(#nodes)], {\"call_me\", job.position})\n\tevents.sleep(120)\n\tos.exit()\nend\nevents.run(function()\n\tevents.periodic(0.25, dcm) --REQUIRED TO USE SPLAYNET\n\tevents.thread(SPLAYschool)\nend)\n\n","disk":{"directory":"\/home\/splayd\/workspace\/local_splay_cluster\/hosts\/host_splayd-99_5\/jobs_fs\/e451a4bc2f5a047092be27ab8761339c","max_files":1024,"lib_directory":"\/home\/splayd\/workspace\/local_splay_cluster\/hosts\/host_splayd-99_5\/jobs_fs\/e451a4bc2f5a047092be27ab8761339c\/lib","max_size":67108864,"max_file_descriptors":1024,"clean":true},"topology":"\/home\/splayd\/workspace\/local_splay_cluster\/hosts\/host_splayd-99_5\/jobs\/e451a4bc2f5a047092be27ab8761339c_host_splayd-99_5_topology","_SPLAYD_VERSION":1.2,"blacklist":["127.0.0.1","localhost"],"keep_files":"FALSE","die_free":"TRUE","name":"","description":"","status":"waiting","ref":"e451a4bc2f5a047092be27ab8761339c","execution_time":0,"max_mem":20971520}
grammar ChurnLang

	rule root
	 	action_line 
		/
		comment_c_style 
		/
		(space)* {
			def desc
				nil
			end
		}
	end
	
	rule action_line
		t:timing space a:action space c:add_churn
		{
			def desc
				Line.new(t.desc,a.desc,c.desc)
			end
		} / 
		t:timing space a:action
		{
			def desc
				Line.new(t.desc,a.desc,nil)
			end
		}
	end
 	
	# ============ Timing
	rule timing
		"at" space a1:additive_time {
			def desc
				InstantTiming.new(a1.value)
			end
		} / 
		"from" space a1:additive_time space "to" space a2:additive_time {
			def desc
				PeriodTiming.new(a1.value,a2.value)
			end
		}
	end
	rule additive_time
		op1:multitive_time opt_space ('+'/'and'/',') 
		opt_space op2:additive_time {
			def value
				op1.value + op2.value
			end
		} / 
		op1:multitive_time opt_space '-' opt_space op2:additive_time {
			def value
				op1.value - op2.value
			end
		} /
		multitive_time 
	end
	rule multitive_time
		op1:primary_time opt_space '*' opt_space op2:multitive_time {
			def value
				op1.value * op2.value 
			end
		} / 
		primary_time
	end
	rule primary_time
		'(' opt_space op1:additive_time opt_space ')' {
			def value
				op1.value
			end
		} / 
		time
	end
	rule time
		n:multitive opt_space t:time_type {
			def value
				n.value * t.multiplier
			end
		}
	end
	rule time_type
		[sS] seconds? {
			def multiplier
				1
			end
		} / [mM] minutes? {
			def multiplier
				60
			end
		} /	[hH] hours? {
			def multiplier
				60*60
			end
		}/ [dD] days? {
			def multiplier
				60*60*24
			end
		} 
	end
	rule seconds 'econd' 's'? end
	rule minutes 'inute' 's'? end
	rule hours 'our' 's'? end
	rule days 'ay' 's'? end
 	
	# ============ Actions	
	rule action
		"set" space ("maximum"/"max") space ("population"/"pop") (space "to" space/space) q:quantity {
			def desc
				SetMaximumPopulationAction.new(q.desc)
			end
		} /
		"set" space ("replacement ratio"/"repratio"/"rep.ratio") (space "to" space/space) q:quantity_relative_only {
			def desc
				SetReplacementRatioAction.new(q.desc)
			end			
		} /
		("join"/"add"/"increase"/"inc") space q:quantity {
			def desc
				IncreaseAction.new(q.desc)
			end
		} /
		("const"/"keep") {
			def desc
				NullAction.new()
			end
		} /
		("leave"/"remove"/"decrease"/"dec") space q:quantity {
			def desc
				DecreaseAction.new(q.desc)
			end
		} /
		("end"/"stop") {
			def desc
				StopAction.new()
			end
		}
	end
	
	# ============ Add churn	
	rule add_churn
		'churn' space q:quantity opt_space ('/'/"per"/"each") opt_space t:additive_time {
			def desc
				AdditionalChurn.new(q.desc,true,t.value)
			end			
		} /	
		'churn' space q:quantity {
			def desc
				AdditionalChurn.new(q.desc,false,nil)
			end
		}
	end
		
	# ============ Expressions	

	rule quantity_relative_only 
		op1:additive opt_space '%' {
			def desc
				Quantity.new(op1.value,true)
			end
		}
	end
	
	rule quantity
		op1:additive opt_space '%' {
			def desc
				Quantity.new(op1.value,true)
			end
		} / 
		additive {
			def desc
				Quantity.new(value,false)
			end
		}
	end
		
	rule additive
		op1:multitive '+' op2:additive {
			def value
				op1.value + op2.value
			end				
		} / 
		op1:multitive '-' op2:additive {
			def value
				op1.value - op2.value
			end
		} / 
		multitive
	end
	rule multitive
		op1:primary '*' op2:multitive {
			def value
				op1.value * op2.value
			end				
		} / 
		primary
	end
	rule primary
		'(' op1:additive ')' {
			def value
				op1.value
			end
		} / 
		number
	end

	# ============ general
	rule number
		[0-9]* { 
			def value 
				text_value.to_i 
			end 
		}
	end
		
	rule space
		[ \t\r]+
	end
	rule opt_space
		[ \t\r]*
	end
	rule comment_c_style
		'/*' (!'*/' . )* '*/' {
			def desc
				nil
			end
		} /	
		'//' .* {
			def desc
				nil
			end
		} /	
		'#'  .*  {
			def desc
				nil
			end
		}
	end
end
